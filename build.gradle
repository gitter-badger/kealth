plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
    id 'maven-publish'
    id 'signing'
}

group 'com.github.marioalvial'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task('sourceJar', type: Jar) {
    classifier 'sources'
    from sourceSets.main.getAllSource()
}
task('javadocJar', type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.marioalvial'
            artifactId 'kealth'
            version '1.0.0'
            pom {
                name = 'kealth'
                description = 'Health check for external dependencies in Kotlin'
                url = 'https://github.com/marioalvial/kealth'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'johnd'
                        name = 'John Doe'
                        email = 'john.doe@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }


            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Serialize and Deserialize Json-LD into Java entities'
            name 'Schema.org Java'
            url 'https://github.com/mautini/schemaorg-java'
            organization {
                name 'com.github.mautini'
                url 'https://github.com/mautini'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/mautini/schemaorg-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/mautini/schemaorg-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/mautini/schemaorg-java'
                connection 'scm:git:git://github.com/mautini/schemaorg-java.git'
                developerConnection 'scm:git:ssh://git@github.com:mautini/schemaorg-java.git'
            }
            developers {
                developer {
                    name 'Mautini'
                }
            }
        }
    }
}

